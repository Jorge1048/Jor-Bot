/*
 * Este archivo index.js es el mismo que existe en "src/index.js", solo est√° aqu√≠
 * para facilitar la ejecuci√≥n del bot en algunos hosts.
 *
 * Si llegaste aqu√≠ es porque probablemente ya usaste un bot de "case" con un "index.js" de 20 mil l√≠neas...
 * Lo s√©, te entiendo.
 * ¬øQu√© es mejor? ¬øQue d√© error en tu play, que vayas al archivo "play.js" y corrijas
 * o que vayas a la l√≠nea 71023 del "index.js" y corrijas?
 *
 * Imagina que pegas tu "case" mal y olvidas cerrar
 * o abrir un par√©ntesis, una llave...
 * Pones el bot a correr, da muchos errores y no sabes c√≥mo resolver...
 * ¬øAdivina qu√© haces?
 * Vuelves al "index.js" a como estaba antes, ¬øverdad?
 *
 * ¬°Eso es lo que no queremos! Queremos un c√≥digo limpio, legible y f√°cil de mantener.
 * Creamos c√≥digo para humanos, no para m√°quinas, as√≠ que, mientras m√°s simple, mejor.
 *
 * De ahora en adelante, vamos a cambiar la palabra "case" por "comando", ¬øok? ¬°Vamos!
 *
 * ---------------- ü§ñ ¬øD√ìNDE EST√ÅN LOS COMANDOS? ü§ñ ----------------
 *
 * Encontrar√°s los comandos dentro de la carpeta "src/commands"
 * ¬øNo entendiste? Vamos:
 *
 * Abre la carpeta "src"
 * Luego, abre la carpeta "commands"
 *
 * F√≠jate que dentro hay 3 carpetas:
 *
 * - üìÅ admin
 * - üìÅ member
 * - üìÅ owner
 *
 * Dentro de la carpeta admin hay comandos administrativos.
 * Dentro de member hay comandos para miembros.
 * Dentro de owner hay comandos accesibles solo para el due√±o del bot/grupo.
 *
 * ¬øSimple, no? Ah, detalle, no necesitas poner un "if" para saber si el comando es de admin o due√±o.
 * El bot ya hace eso por ti. Solo coloca el comando en la carpeta correspondiente.
 *
 * ---------------- ü§ñ ¬øD√ìNDE MODIFICO EL MEN√ö? ü§ñ ----------------
 *
 * Abre la carpeta "src"
 * Ve al archivo "messages.js" y edita el men√∫.
 * Solo recuerda, haz todo dentro de las comillas invertidas (`), pues es un template string.
 *
 * ¬øNo entendiste?
 * Mira:
 *
 * `Hola, ¬øtodo bien?` - Esto est√° CORRECTO ‚úÖ
 *
 * Hola `¬øtodo bien?` - Esto est√° INCORRECTO (f√≠jate que el "Hola" est√° fuera de las comillas) ‚ùå
 *
 * ---------------- ü§ñ ¬øC√ìMO CAMBIO LA FOTO DEL BOT? ü§ñ ----------------
 *
 * Abre la carpeta "assets"
 * Luego, abre la carpeta "images"
 * Sustituye la imagen "takeshi-bot.png" por otra que prefieras.
 * Solo no olvides mantener el nombre "takeshi-bot.png"
 *
 * ---------------- üöÄ IMPORTANTE üöÄ ----------------
 *
 * Lee el tutorial completo en: https://github.com/guiireal/takeshi-bot?tab=readme-ov-file#instalaci%C3%B3n-en-termux-
 *
 * ¬°No te saltes pasos! L√©e todo completo, porque es muy importante para entender c√≥mo funciona el bot.
 *
 * By: Dev Gui
 *
 * No modifiques nada de aqu√≠ para abajo, a menos que sepas lo que haces.
 */
const NodeCache = require("node-cache");
const { connect } = require("./src/connection");
const { load } = require("./src/loader");
const {
  infoLog,
  bannerLog,
  errorLog,
  warningLog,
} = require("./src/utils/logger");

const safeLoad = async (socket, groupCache, retryCount = 0) => {
  const MAX_RETRIES = 5;
  const RETRY_DELAY = 10000;

  try {
    load(socket, groupCache);
    return true;
  } catch (error) {
    errorLog(`Erro ao carregar o bot: ${error.message}`);

    if (retryCount < MAX_RETRIES) {
      warningLog(
        `Tentativa ${retryCount + 1}/${MAX_RETRIES} - Recriando conex√£o em ${
          RETRY_DELAY / 1000
        } segundos...`
      );

      await new Promise((resolve) => setTimeout(resolve, RETRY_DELAY));

      const newSocket = await connect(groupCache);

      return await safeLoad(newSocket, groupCache, retryCount + 1);
    } else {
      errorLog(
        `N√∫mero m√°ximo de tentativas (${MAX_RETRIES}) atingido. O bot ser√° encerrado.`
      );
      return false;
    }
  }
};

async function start() {
  try {
    process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
    process.setMaxListeners(1500);

    bannerLog();
    infoLog("Iniciando meus componentes internos...");

    const groupCache = new NodeCache({ stdTTL: 5 * 60, useClones: false });
    const socket = await connect(groupCache);

    const loadSuccess = await safeLoad(socket, groupCache);

    if (!loadSuccess) {
      errorLog("N√£o foi poss√≠vel iniciar o bot ap√≥s m√∫ltiplas tentativas.");
    }
  } catch (error) {
    errorLog(`Erro fatal: ${error.message}`);
    console.error(error);
  }
}

start();
